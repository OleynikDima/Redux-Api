{"version":3,"sources":["components/Contacts/Contact.module.css","components/Form/Form.module.css","components/Form/Alert.module.css","components/Form/transition/alert.module.css","components/Contacts/transition/pop.module.css","components/Contacts/transition/filter.module.css","components/redux/taskAction.js","components/redux/taskReducer.js","components/redux/store.js","components/Form/alert.js","components/redux/taskOperation.js","components/redux/selectors.js","components/Form/index.js","components/Contacts/index.js","components/Contacts/ContactFilter.js","components/App.js","index.js"],"names":["module","exports","addItemRequest","createAction","addItemSuccess","addItemError","fetchItemRequest","fetchItemSuccess","fetchItemError","removeItemRequest","removeItemSuccess","removeItemError","changeFilter","onRemoveItem","items","createReducer","taskAction","state","action","payload","filter","contact","id","loading","combineReducers","store","configureStore","reducer","contacts","taskReducer","Alert","text","className","style","container","addTask","number","dispatch","tasksAction","axios","post","then","res","console","log","data","catch","error","fetchItems","get","removeItem","delete","getContactsItems","getFilter","getContacts","getIsLoadingBtn","getVisibleContacts","createSelector","contack","toLowerCase","includes","Form","showAlert","handleChangeText","e","setState","target","value","handleChangeNumber","handleSubmit","preventDefault","props","map","user","setTimeout","onAddText","styles","header","CSSTransition","in","timeout","appear","classNames","unmountOnExit","title","this","redAlert","form","onSubmit","input","type","onChange","placeholder","input_number","country","button","disabled","isLoadingBtn","Component","connect","selectors","taskOperation","Contacts","onDelete","box_contact","TransitionGroup","component","list","length","key","popItem","item","onClick","PropsTypes","node","string","name","isRequired","func","mapDispatchToProps","selector","onChangeFilter","selection","filterStyle","label","input_cont","App","onFetchContacts","mapDispatchProps","tasksOperation","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe70768d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Contact_filter__2cn7S\",\"input_cont\":\"Contact_input_cont__1GHcq\",\"label\":\"Contact_label__22BKO\",\"item\":\"Contact_item__3P6HO\",\"button\":\"Contact_button__3-gGv\",\"list\":\"Contact_list__3KXQg\",\"box_contact\":\"Contact_box_contact__33PdI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Form_header__B1HhE\",\"title\":\"Form_title__lNS_Y\",\"container\":\"Form_container___cwBN\",\"form\":\"Form_form__2TM1N\",\"input\":\"Form_input__2ESfd\",\"input_number\":\"Form_input_number__2ZXKo\",\"button\":\"Form_button__243jh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Alert_container__1rc7v\",\"text\":\"Alert_text__22xAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"alert_enter__10tOI\",\"enterActive\":\"alert_enterActive__23mND\",\"exit\":\"alert_exit__WQGvv\",\"exitActive\":\"alert_exitActive__2U44I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__2bpL5\",\"enterActive\":\"pop_enterActive__1TgHP\",\"exit\":\"pop_exit__20DOa\",\"exitActive\":\"pop_exitActive__3ql9l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"filter_enter__3AX-_\",\"enterActive\":\"filter_enterActive__WgEPX\",\"exit\":\"filter_exit__2y5F1\",\"exitActive\":\"filter_exitActive__n1mOP\"};","// import actionTypes from './taskActionRTypes'\nimport {createAction} from '@reduxjs/toolkit'\n\n  \nconst addItemRequest = createAction('contacts/addRequest');\nconst addItemSuccess = createAction('contacts/addSuccess');\nconst addItemError = createAction('contacts/addError');\n\nconst fetchItemRequest = createAction('contacts/fetchRequest');\nconst fetchItemSuccess = createAction('contacts/fetchSuccess');\nconst fetchItemError = createAction('contacts/fetchError');\n\nconst removeItemRequest = createAction('contacts/removeRequest');\nconst removeItemSuccess = createAction('contacts/removeSuccess');\nconst removeItemError = createAction('contacts/removeError');\n\n\n// const addTask = createAction('tasks/add', text => ({\n// }))\n\n\nconst  changeFilter = createAction('contacts/changeFilter');\nconst onRemoveItem = createAction('contacts/remove');\n\n\n\nexport default {\n    addItemRequest,\n    addItemSuccess,\n    addItemError,\n\n    fetchItemRequest,\n    fetchItemSuccess,\n    fetchItemError,\n\n    removeItemRequest,\n    removeItemSuccess,\n    removeItemError,\n    \n    changeFilter,\n    onRemoveItem,\n}","import {combineReducers} from 'redux';\n// import actionTypes from './taskActionRTypes'\nimport taskAction from './taskAction';\nimport {createReducer} from '@reduxjs/toolkit'\nimport users from '../users'\n\n\nconst newItemObj = (state, action) => {\n    return [...state, action.payload]\n}\nconst onRemoveItem = (state, action) => {\n    return state.filter(contact => contact.id !== action.payload);\n}\nconst changeFilter = (state,action) => {\n    return action.payload;\n}\n\n\nconst items = createReducer([],{\n    [taskAction.fetchItemSuccess]:(state,action) => action.payload,\n    [taskAction.addItemSuccess]: newItemObj,\n    [taskAction.removeItemSuccess]: onRemoveItem,\n});\n\nconst filter = createReducer('', {\n    [taskAction.changeFilter]:changeFilter\n});\n\n\nconst loading = createReducer(false ,{\n    [taskAction.removeItemRequest]:()=> true,\n    [taskAction.removeItemSuccess]:()=> false,\n    [taskAction.removeItemError]:()=> false,\n\n    [taskAction.fetchItemRequest]:()=> true,\n    [taskAction.fetchItemSuccess]:()=> false,\n    [taskAction.fetchItemError]:()=> false,\n\n    [taskAction.addItemRequest]:()=> true,\n    [taskAction.addItemSuccess]:()=> false,\n    [taskAction.addItemError]:()=> false,\n})\n\n\nexport default combineReducers({\n    loading,\n    items,\n    filter,\n})\n","import taskReducer from './taskReducer'\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\n// import logger from 'redux-loger;'\n\n\n\n// const defaultMiddleware = getDefaultMiddleware();\n\n// const loggerMiddleware = store => next => action => {\n//         console.group(action.type);\n//         console.info('dispatch' , action);\n//         console.groupEnd(action.type);\n\n//         next(action)\n// };\n\n\n\nconst store = configureStore({\n        reducer:{     \n           contacts:taskReducer,\n        },\n        // middleware:[ ...defaultMiddleware,loggerMiddleware],\n});\n\nexport default store;","import React from 'react'\nimport style from './Alert.module.css'\n\n\nconst Alert = ({text}) => {\n    \n    return (\n           <div className={style.container}>\n                <span className={style.text}> {text} </span>\n            </div>\n    )\n}\n\nexport default Alert;","import axios from 'axios';\nimport tasksAction from './taskAction';\n\nconst addTask = ({text,number}) => dispatch => {\n    dispatch(tasksAction.addItemRequest());\n\n    axios.post('http://localhost:3001/contacts', {text,number})\n    .then(res => {\n        console.log(res.data)\n        dispatch(tasksAction.addItemSuccess(res.data));\n    })\n    .catch(error => dispatch(tasksAction.addItemError(error)));\n}\n\n\n\n\nconst fetchItems = () => dispatch => {\n    dispatch(tasksAction.fetchItemRequest());\n    axios\n      .get('http://localhost:3001/contacts')\n      .then(({data})=> dispatch(tasksAction.fetchItemSuccess(data)))\n      .catch(error => dispatch(tasksAction.fetchItemError(error)))\n}\n\nconst removeItem = id => dispatch => {\n    dispatch(tasksAction.removeItemRequest());\n\n    axios\n      .delete(`http://localhost:3001/contacts/${id}`)\n      .then(()=> dispatch(tasksAction.removeItemSuccess(id)))\n      .catch(error => dispatch(tasksAction.removeItemError(error)))\n}\n\n\n\nexport default {\n    addTask,\n    fetchItems,\n    removeItem,\n}","import {createSelector} from '@reduxjs/toolkit'\n\nconst  getContactsItems = state => state.contacts.items;\n\nconst getContacts = state => state.contacts; \n\nconst getIsLoadingBtn = state => state.contacts.loading;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getVisibleContacts = createSelector([getContactsItems,getFilter],(items,filter)=>{\n    return items.filter(contack => contack.text.toLowerCase().includes(filter))\n});\n\n\n// const getVisibleContacts = state => {\n//     const filter = getFilter(state).toLowerCase();\n//     const items = getContactsItems(state);\n//     // search similar name\n\n//        return items.filter(contack => contack.text.toLowerCase().includes(filter))\n      \n// }\n\n\nexport default {\n    getContactsItems,\n    getContacts,\n    getIsLoadingBtn,\n    getFilter,\n    getVisibleContacts,\n}","import React, {Component}from 'react';\nimport {CSSTransition} from 'react-transition-group'\nimport styles from './Form.module.css'\nimport './transition/animation.css'\nimport redAlert from './transition/alert.module.css'\nimport MessageRed from './alert.js'\n\n// import taskAction from '../redux/taskAction'\nimport taskOperation from '../redux/taskOperation'\nimport {connect} from 'react-redux'\nimport selectors from '../redux/selectors'\n\n\nclass Form extends Component {\n    state={\n        text:'',\n        number:'',\n        showAlert:false,\n    }\n//change text in state\n    handleChangeText = e => {\n        this.setState({\n            text: e.target.value,\n        })\n    }\n//change number in state \n    handleChangeNumber = e => {\n        this.setState({\n            number: e.target.value,\n        })\n    }\n\n// push in store.state redux\n    handleSubmit = e =>{\n       e.preventDefault();\n       const {text,number} = this.state\n\n              //check for similar name\n        const contacts = this.props.state.items\n\n        const filterName = contacts.map(user => user.text)\n         \n        if(filterName.includes(text)){\n              // if name already -> it's messageRed \n            setTimeout(() => this.setState({showAlert:false}),2000)\n             this.setState({showAlert:true})\n        }else {\n              // if name not repeat -> it's ok \n            this.props.onAddText({text,number})\n        }\n\n    //remove input\n        this.setState({\n            text:'',\n            number:'',\n        })\n    }\n\n\nrender(){\n return (\n    <div className={styles.container}>\n        <div className={styles.header}>\n            <CSSTransition  in={true} timeout={500} appear={true} classNames=\"titleIn\" unmountOnExit>\n                    <h2 className={styles.title}> Phonebook </h2>\n            </CSSTransition>\n\n            <CSSTransition in={this.state.showAlert} timeout={250} classNames={redAlert} unmountOnExit>\n                     <MessageRed text=\"Contact is already\" />\n            </CSSTransition>\n        </div>\n\n    <form  className={styles.form} onSubmit={this.handleSubmit} >\n        <label>Name\n            <input \n            className={styles.input}\n            type=\"input\" \n            value={this.state.text}\n            onChange={this.handleChangeText}\n            placeholder=\"please write name\"\n            />\n         </label>\n\n         <label> Number\n            <input \n            className={styles.input_number}\n            type=\"input\" \n            country=\"US\"\n            value={this.state.number}\n            onChange={this.handleChangeNumber}\n            placeholder=\"number phone\"\n            />\n         </label>\n\n\n         <button \n            className={styles.button} \n            type=\"submit\"\n            disabled={!this.state.text}\n            >\n                { this.props.isLoadingBtn === true ? `Loading ` : `Add contact`\n                } \n         </button>\n    </form>   \n    </div>\n  )\n }\n}\n\n\n\nconst mapStateToProps = state => {\n      return {\n        isLoadingBtn:selectors.getIsLoadingBtn(state),\n        state:selectors.getContacts(state),\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddText:(text,number) => dispatch(taskOperation.addTask(text,number)),\n    }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);","\nimport React from 'react';\nimport PropsTypes from 'prop-types';\nimport style from './Contact.module.css'\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\nimport popItem from './transition/pop.module.css'\n\n\n// add redux connect \nimport {connect} from 'react-redux'\n// import taskAction from '../redux/taskAction'\nimport taskOperation from '../redux/taskOperation'\nimport selector  from '../redux/selectors'\n\n\n// func create list item \n\nconst Contacts = ({contacts, onDelete}) => {\n    console.log(contacts);\n    return (\n    <div className={style.box_contact}>\n        <TransitionGroup component='ul'className={style.list} >\n               { contacts.length > 0 ? contacts.map((contact) => (\n                       <CSSTransition \n                            in={true} \n                            key={contact.id} \n                            classNames={popItem}\n                            timeout={250}\n                            unmountOnExit\n                            >\n                           <li className={style.item} >\n                               {contact.text} : {contact.number} \n                                <button className={style.button} onClick={()=> onDelete(contact.id)}>\n                                    x\n                                </button>\n                             </li>\n                       </CSSTransition> )\n                        )\n                : ''\n            }\n        </TransitionGroup>\n    </div>\n    )\n}\n\nContacts.PropsTypes = {\n    contacts:PropsTypes.node={\n        id:PropsTypes.string,\n        name:PropsTypes.string.isRequired,\n        number:PropsTypes.string.isRequired\n    },\n    onDelete:PropsTypes.func.isRequired,\n}\n\n\nconst mapStateToProps = (state) => ({ \n    contacts:selector.getVisibleContacts(state)\n});\n\nconst mapDispatchToProps = {\n    onDelete:taskOperation.removeItem\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);","import React from 'react';\nimport style from './Contact.module.css';\nimport { CSSTransition } from 'react-transition-group';\nimport filterStyle from './transition/filter.module.css';\n\n\nimport {connect} from 'react-redux'\nimport taskAction from '../redux/taskAction'\nimport selection from  '../redux/selectors'\n\n\n//Filter input for Contacts \nfunction ContactFilter ({value,onChangeFilter}){\n    return (\n        // не могу понять почему не работает CSSTransition\n        <CSSTransition in={true} classNames={filterStyle}  timeout={250} unmountOnExit >\n       \n        <div className={style.filter}>\n                <label  className={style.label}>\n                    Find contacts by name \n                        <input className={style.input_cont} type=\"text\"\n                            value={value}\n                            onChange={e => onChangeFilter(e.target.value)}\n                        />\n                </label>\n            </div>\n        </CSSTransition>\n    )\n}\n\n\nconst mapStateToProps = state => ({\n    value:selection.getFilter(state)\n})\n\nconst mapDispatchToProps = {\n    onChangeFilter:taskAction.changeFilter\n} \n\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactFilter);","import React, { Component } from 'react';\nimport Form from './Form';\nimport ContactsList from './Contacts';\nimport ContactFilter from './Contacts/ContactFilter';\nimport {connect} from 'react-redux';\nimport tasksOperation from './redux/taskOperation'\nimport selectors from './redux/selectors'\n\n\n\nclass App extends Component{\n    componentDidMount(){\n       this.props.onFetchContacts();\n    }\n    render(){\n        return (\n            <>\n                <Form />\n                {this.props.contacts.length > 1 && \n                    <ContactFilter /> \n                }       \n                <ContactsList/>\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => ({\n        contacts:selectors.getContactsItems(state)\n})\n\nconst mapDispatchProps = {\n    onFetchContacts:tasksOperation.fetchItems\n}\n\nexport default connect(mapStateToProps,mapDispatchProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from './components/redux/store'\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}